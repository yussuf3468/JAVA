
Java Conditional Statements - Comprehensive Notes
=================================================

In Java, conditional statements allow your program to make decisions based on certain conditions.
These statements help control the flow of execution based on boolean expressions (true or false).

1. if Statement
---------------
The `if` statement executes a block of code if a specified condition is true.

Syntax:
    if (condition) {
        // code to execute if condition is true
    }

Example:
    int age = 20;
    if (age >= 18) {
        System.out.println("You are an adult.");
    }

2. if-else Statement
--------------------
The `if-else` statement executes one block of code if the condition is true, and another block if it is false.

Syntax:
    if (condition) {
        // code if condition is true
    } else {
        // code if condition is false
    }

Example:
    if (age >= 18) {
        System.out.println("You can vote.");
    } else {
        System.out.println("You are too young to vote.");
    }

3. if-else if-else Ladder
-------------------------
Allows you to test multiple conditions.

Syntax:
    if (condition1) {
        // code if condition1 is true
    } else if (condition2) {
        // code if condition2 is true
    } else {
        // code if none of the conditions are true
    }

Example:
    int score = 75;
    if (score >= 90) {
        System.out.println("Grade: A");
    } else if (score >= 80) {
        System.out.println("Grade: B");
    } else if (score >= 70) {
        System.out.println("Grade: C");
    } else {
        System.out.println("Grade: F");
    }

4. Nested if Statements
-----------------------
You can use an if statement inside another if statement.

Syntax:
    if (condition1) {
        if (condition2) {
            // code if both conditions are true
        }
    }

Example:
    if (age >= 18) {
        if (citizenship.equals("Kenyan")) {
            System.out.println("You can vote in Kenya.");
        }
    }

5. switch Statement
-------------------
The `switch` statement allows you to choose between many blocks of code.

Syntax:
    switch (expression) {
        case value1:
            // code block
            break;
        case value2:
            // code block
            break;
        ...
        default:
            // default code block
    }

Example:
    int day = 3;
    switch (day) {
        case 1:
            System.out.println("Monday");
            break;
        case 2:
            System.out.println("Tuesday");
            break;
        case 3:
            System.out.println("Wednesday");
            break;
        default:
            System.out.println("Invalid day");
    }

Important Notes:
----------------
- Always use `.equals()` to compare Strings, not `==`.
- `switch` works with byte, short, char, int, String, and enums (Java 7+).
- Use `break` to prevent fall-through in `switch` cases.
- You can nest `if`, `else if`, and `switch` as needed.

